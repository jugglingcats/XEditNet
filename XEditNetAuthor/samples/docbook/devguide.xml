<?xeditnet-style docbook.style?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "dtd/docbookx.dtd"[
]><book><title>XEditNet Developers's Guide</title><preface><title>Introduction</title><para>This guide describes how to create applications using XEditNet. It describes both the underlying control, XEdtiNetCtrl and the structure of the reference application, XEditNet Author.</para><sect1><title>Audience</title><para>This guide is intended for people creating XML editing applications, for example system integrators or publishing system developers.</para></sect1><sect1><title>How this guide was produced</title><para>This guide was written using XEditNetAuthor according to the <ulink url="http://www.docbook.org">Docbook DTD</ulink> and converted to Microsoft HTML Help using the <ulink url="http://docbook.sourceforge.net/projects/xsl/index.html">Docbook XSL Stylesheets</ulink>.</para><para>The API reference part of this guide was produced by extracting documentation comments and merging them with information gathered using .NET reflection. This enhanced information was passed through an XSLT stylesheet to produce docbook and then incorporated into this guide.</para><para>The source for this guide is provided with the XEditNetAuthor distribution, under the <filename>samples/docbook</filename> directory. A simple script to produce the HTML Help is in <filename>samples/docbook/hh/make.cmd</filename>.</para></sect1></preface><chapter><title>Concepts</title><sect1><title>XEditNet and the .NET Framework</title><para>XEditNet is a .NET UserControl. It relies heavily on the core .NET XML APIs -- in essence, you can attach an XEditNetCtrl instance to any XmlDocument object. Because of this, many areas of functionality normally provided through an editor API you will not find in XEditNet. You can simply use the .NET Framework XML functionality directly.</para><para><emphasis role="bold">This makes XEditNet very simple to use but is also makes the API provided by XEditNet quite "basic". If you have suggestions for common features that should be provided without additional coding please email <ulink url="mailto:api@xeditnet.com">api@xeditnet.com</ulink>.</emphasis></para></sect1><sect1 id="docchange"><title>Document change events and multi-threading</title><para>XEditNet relies heavily on the .NET events provided by the XmlDocument class. It uses these events in three distinct areas:</para><variablelist><varlistentry><term>Rendering</term><listitem><para>As the document is modified, the layout engine automatically invalidates areas of the control corresponding to changed node, so that updates are immediately reflected in the view.</para></listitem></varlistentry><varlistentry><term>Undo/redo support</term><listitem><para>XEditNet has a standalone undo/redo manager that tracks document changes and maintains an undo / redo history.</para></listitem></varlistentry><varlistentry><term>Validation</term><listitem><para>XEditNet has a standalone validation component that maintains a list of invalid nodes.</para></listitem></varlistentry></variablelist><para>When changes are made to a document, .NET typically raises two events, for example a NodeInserting event and a NodeInserted event. For a few events it is necessary for XEditNet to inspect both events and track values across both events. Because of this XEditNet relies on these events being fired in sequence, but this is not guaranteed if changes are made to the document from multiple threads. Therefore you should not write applications around XEditNet that use multiple threads in this way.</para></sect1><sect1 id="shortcuts"><title>Undo / redo support</title><para>XEditNet provides comprehensive undo/redo support by hooking into the XmlDocument change event as described in <xref linkend="docchange" />. This can be inefficient if a large number of changes are made via the .NET API. Currently there is no way to disable the undo tracking for an attached document. The simplest way to handle this situation is to detach the document, make the changes and then re-attach. Clearly when this happens the undo history is lost.</para></sect1><sect1><title>Entity resolution</title><para>The .NET API does not make it easy to provide PUBLIC to SYSTEM entity mapping, such as OASIS Catalog support. By default, when loading a document using the LoadDocument method, XEditNet provides a very simple entity resolver (System.Xml.XmlResolver derived class) that attempts to locate remote URLs by looking at directories relative to the document source. For example if the document is c:/tmp/test.xml and references http://somewhere.com//test/dtd/test.dtd, then XEditNet will search for c:/tmp/test.dtd, c:/tmp/dtd/test.dtd, c:/tmp/test/test/dtd/test.dtd and so on. If the document is not found locally, the original URL is used and you must be online, and the load time is likely to be slower. This is approach clearly doesn't support many common scenarios, in which case you should create the XmlDocument outside the control and attach it using the XEditNetCtrl.Attach method.</para><para><emphasis role="bold">Future versions are likely to support more configurable entity resolution. Please email your usage scenarios to <ulink url="mailto:api@xeditnet.com">api@xeditnet.com</ulink>.</emphasis></para></sect1><sect1><title>Stylesheets</title><para>***</para></sect1></chapter><chapter><title>How to...</title><sect1><title>Load a document into the control</title><para>There are two ways to associate the control with an XmlDocument. You can either attach an existing XmlDocument that you have created or loaded yourself, or you can attempt to load the document from a file.</para><bridgehead>Attaching an XmlDocument</bridgehead><para>Use the XEditNetCtrl.Attach method. If the document references a DTD and you loaded it with XmlValidatingReader, set the valid argument to true, otherwise XEditNet will attempt to validate the document manually after attaching it. This can take a few seconds for very large documents.</para><bridgehead>Loading a file</bridgehead><para>Use the XEditNetCtrl.LoadDocument method. Pass the filename or URL plus a flag indicating if XEditNet should allow well-formed documents to be loaded. If this flag is set to true and the document does not pass validation, the user will be asked whether to load the document as well-formed, after which manual validation will take place and errors highlighted.</para></sect1><sect1><title>Subclass the control</title><para><emphasis role="bold">Currently XEditNet provides very few exported virtual methods. This is likely to change in future releases and comments on provision for subclassed controls are welcome - please email <ulink url="mailto:api@xeditnet.com">api@xeditnet.com</ulink>.</emphasis></para><para>You can subclass XEditNetCtrl as you would other controls. Some virtual methods that you might want to override are:</para><variablelist><varlistentry><term>EditModifyAttribute</term><listitem><para>Override this method if you want to display a custom attribute editor for specific elements.</para></listitem></varlistentry><varlistentry><term>LoadDocument</term><listitem><para>Override this method if you want to change the way XEditNet loads documents into the control, for example by providing a different entity resolver.</para></listitem></varlistentry></variablelist></sect1><sect1><title>Embed the control in an Internet Explorer form</title><para><emphasis role="bold">This type of integration has not been heavily tested for the beta release, therefore this information is provisional.</emphasis></para><para>Internet Explorer is capable of hosting .NET UserControls in the same way as ActiveX controls. It is the only native Windows application capable of doing this at present.</para><para>For more information about hosting UserControls in IE, see ***link***.</para></sect1></chapter><chapter><title>Stylesheet Reference</title><para>***</para></chapter></book>